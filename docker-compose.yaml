services:
  inventory-db:
    container_name: inventory-db
    build:
      context: srcs/postgres-db
    restart: always
    volumes:
      - inventory-database:/var/lib/postgresql/data
    environment:
      DB_USER: ${INVENTORY_DB_USER}
      DB_NAME: ${INVENTORY_DB_NAME}
      DB_PASSWORD: ${INVENTORY_DB_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 3s
      timeout: 1s
      retries: 5

  inventory-app:
    container_name: inventory-app
    restart: always
    build:
      context: srcs/inventory-app
    environment:
      INVENTORY_DB_USER: ${INVENTORY_DB_USER}
      INVENTORY_DB_PASSWORD: ${INVENTORY_DB_PASSWORD}
      INVENTORY_DB_NAME: ${INVENTORY_DB_NAME}
      INVENTORY_APP_PORT: ${INVENTORY_APP_PORT}
    ports:
      - "${INVENTORY_APP_PORT}:8080"
    networks:
      - app-network
    depends_on:
      inventory-db:
        condition: service_healthy

  billing-db:
    container_name: billing-db
    build:
      context: srcs/postgres-db
    restart: always
    volumes:
      - billing-database:/var/lib/postgresql/data
    environment:
      DB_USER: ${BILLING_DB_USER}
      DB_PASSWORD: ${BILLING_DB_PASSWORD}
      DB_NAME: ${BILLING_DB_NAME}
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 3s
      timeout: 1s
      retries: 5

  rabbit-queue:
    container_name: rabbitmq
    build:
      context: srcs/rabbitmq
    hostname: rabbit-queue
    command: rabbitmq-server
    restart: always
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3

  billing-app:
    container_name: billing-app
    build:
      context: srcs/billing-app
    restart: always
    environment:
      BILLING_DB_USER: ${BILLING_DB_USER}
      BILLING_DB_PASSWORD: ${BILLING_DB_PASSWORD}
      BILLING_DB_NAME: ${BILLING_DB_NAME}
      BILLING_APP_PORT: ${BILLING_APP_PORT}
      RABBITMQ_HOST: rabbit-queue
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    ports:
      - "${BILLING_APP_PORT}:8080"
    networks:
      - app-network
    depends_on:
      billing-db:
        condition: service_healthy
      rabbit-queue:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    build:
      context: srcs/api-gateway-app
    restart: always
    environment:
      APIGATEWAY_PORT: ${APIGATEWAY_PORT}
      RABBITMQ_HOST: rabbit-queue
      INVENTORY_APP_HOST: inventory-app
      BILLING_APP_HOST: billing-app
      INVENTORY_APP_PORT: ${INVENTORY_APP_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    ports:
      - "${APIGATEWAY_PORT}:3000"
    networks:
      - app-network
    volumes:
      - api-gateway-app:/var/log/api-gateway
    depends_on:
      rabbit-queue:
        condition: service_healthy
      inventory-app:
        condition: service_started
      billing-app:
        condition: service_started

networks:
  app-network:
    driver: bridge

volumes:
  inventory-database:
  billing-database:
  api-gateway-app:
